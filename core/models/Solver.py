import os
import datetime
from time import perf_counter
import os
import json

from core.models import Schedule, StateManager
from core.logging import UCSPLogger

from algorithms.genetic.smart_mut_ga import GeneticAlgorithm


class UCSPSolver:
    """ 
    UCSP Solver

    used to solve UCSP using preferred algorithms.

    The `config_file` should provide enough configurable options for most use cases. Additional (optional) flags can be used to overwrite the configs in `config_file`.

    :param config_file: The JSON file used to configure UCSP solver.  (default: 'ucsp.config.json')
    \n
    :param save_sch: (optional) Boolean to decide whether to save the final schedule or to just display it in console. If `True`, the final encoded schedule is saved in `data/schedules/` with the datetime of when the schedule was generated.
    \n
    :param save_logs: (optional) Boolean to decide whether to save the logs generated by solver i.e. the Generation and Fitness of each iteration of the chosen solver algorithm. The logs will be saved in `data/logs/` with the datetime of when the log was started.
    \n
    :param inspect_final_sch: (optional) Boolean to determine whether to inspect the fitness of the final schedule or not.
    \n

    """

    def __init__(self, config, state: StateManager):
        self._config = config
        self._state = state
        self._logger = UCSPLogger(self._config['save_logs'])

        self._save_sch = self._config['save_schedule']
        self._inspect_final_sch = self._config['inspect_final_schedule']
        self.min_acceptable_fitness = self._config["fitness"]['min_acceptable_fitness']

    def solve(self, algo="ga", *args, **kwargs):
        t1 = perf_counter()
        sch = GeneticAlgorithm(self._logger, self._state).run(*args, **kwargs)
        t2 = perf_counter()
        self._write_schedule(sch)
        self._logger.write(f"\nTime taken: {t2-t1} s")

    def _write_schedule(self, sch: Schedule):
        if self._save_sch:
            t = datetime.datetime.now().strftime('%Y-%m-%dT%H-%M-%S')

            fname = os.path.join(
                os.getcwd(), "data/schedules", f"sch-str-{t}.csv")
            with open(fname, "w") as f:
                f.write(sch.to_csv())
            self._logger.write(
                f"\nHuman Readable Schedule successfully saved to {fname}")

            fname = os.path.join(
                os.getcwd(), "data/schedules", f"sch-num-{t}.csv")
            with open(fname, "w") as f:
                f.write(sch.to_num_csv())
            self._logger.write(
                f"\nNumeric Schedule successfully saved to {fname}")
        else:
            print("\nFinal Schedule: \n")
            print(sch.to_tsv())

        fit = self._state.fitness(sch, _inspect=self._inspect_final_sch)
        print(f"Final fitness: {fit}")
